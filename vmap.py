import subprocess
import sys
import os
import shutil
import vutils

class VMap:
    """Class for managing mapper wrapper calls and runtime processes.
    Attributes:
        finput (list): List of strings containing input real file path(s).
        map_dir (str): Path to mapped output subdirectory within the
                       base output directory.
        mapper (str): Name of selected mapping utility.
        threads (str): Number of threads to be used (default: 1)
        hits_file (str): Path to ouput file generated by the mapper
                         utility.
        index_dir (str): Path to directory containing GBK files to be
                         used in the construction of the mapper index
    """

    def __init__(self, finput, mapper, map_dir):
        self.finput = finput
        self.map_dir = map_dir
        self.mapper = mapper
        self.threads = '1'
        self.hits_file = None
        self.index_dir = None


    def start_logger(self, log_dir):
        """Boiler plate method to start a new logger.
        Arguments:
            log_dir (str): Dirctory to be used for logger output.
        Attributes:
            _logger (Logger): Logger object for this class.
        """
        self._logger = vutils.Logger('vmap', log_dir)

    def run_map(self, threads):
        """Public method for initiating the mapper process.
        Arguments:
            threads (int): Number of threads with which to run the
                           mapper utility.
        """
        self.threads = str(threads)
        self._get_orfs()
        self._logger.log('run_map', 'Starting mapper: %s'
                                    % self.mapper
                        )
        self._run_mapper()
        self._logger.log('run_map', 'Finished mapper.\n'
                                    'Output: %s' % self.hits_file
                        )

    def _get_orfs(self):
        """Wrapper method for invoking the get_orfs utility.
        Output:
            Predicted ORFs generated by the get_orf utility.
            Output stored in predicted_orfs.faa in the mapped
            output subdirectory.
        """
        print('Running getorf...')
        self.orfs = os.path.join(self.map_dir, 'predicted_orfs.faa')
        self._logger.log('get_orfs', 'Startingg getorf.\n'
                                     'Output: %s' % self.orfs
                        )
        subprocess.check_call(['getorf',
                               '-find', '0', # NOTE 0 is for AA, 2 for NUC
                               '-minsize', '90',
                               self.finput,
                               self.orfs
                              ])
    def _run_mapper(self):
        """Wrapper method for invoking the specified mapper utility.
        Output:
            Predicted hits stored in the hits.csv file in the mapped subdirectory
            of the base output dir.
        Raises:
            ValueError: Exception raised if passed an unknown mapper utility
                        option.
        """
        self.hits_file = os.path.join(self.map_dir, 'hits.csv')
        if self.mapper == 'blastp':
            print("Running blastp...")
            subprocess.check_call(['blastp',
                                   '-query', self.orfs,
                                   '-db', self.index_dir,
                                   '-max_target_seqs', '1',
                                   '-evalue', '1',
                                   '-out', self.hits_file,
                                   '-outfmt',
                                   '6 qseqid sseqid qstart qend pident length evalue bitscore',
                                   '-num_threads', self.threads
                                  ])

        elif self.mapper == 'lambda':
            output_fields = 'qseqid sseqid qstart qend pident length evalue bitscore'
            temp_file = os.path.join(self.map_dir, 'hits.m8')
            print('Running lambda...')
            subprocess.check_call(['lambda',
                                   '-p', 'blastp',
                                   '-q', self.orfs,
                                   '-i', self.index_dir,
                                   '-t', self.threads,
                                   '-o', temp_file,
                                   '--output-columns',
                                   output_fields
                                  ])
            shutil.move(temp_file, self.hits_file)

        elif self.mapper == 'diamond':
            print('Running blast...')
            subprocess.check_call(['diamond', 'blastp',
                                   '-d', self.index_dir,
                                   '--threads', self.threads,
                                   '-q', self.orfs,
                                   '-o', self.hits_file,
                                   '--outfmt',
                                   '6', 'qseqid', 'sseqid', 'qstart', 'qend', 'pident',
				                   'length', 'evalue', 'bitscore'
                                  ])

        else:
            raise ValueError('Impropper mapper: %s' % self.mapper)

    def build_index(self, index_input):
        """Public wrapper method for invoking the specified mappers index building
           pre-mapping step.
        Arguments:
            index_input (str): path to generated index FAA file.
        Output:
            Index file generated by the specified mapper utility.
            Located in the index subdirectory within the mapped directory.
        Raises:
            ValueError: Exception raised on unrecognized mapper utility.
        """
        print("Building index...")
        self.index_dir = os.path.join(self.map_dir, 'index')
        if self.mapper == 'diamond':
            subprocess.check_call(['diamond', 'makedb',
                                   '--in', index_input,
                                   '-d', self.index_dir,
                                  ])

        elif self.mapper == 'lambda':
            self.index_dir = self.index_dir + '.lambda' # lambda specific format
            subprocess.check_call(['lambda_indexer',
                                   '-d', index_input,
                                   '-i', self.index_dir
                                  ])

        elif self.mapper == 'blastp':
            subprocess.check_call(['makeblastdb',
                                   '-in', index_input,
                                   '-dbtype', 'prot',
                                   '-out', self.index_dir
                    ])
        else:
            raise ValueError('Impropper mapper: %s' % self.mapper)
# Test
if __name__ == '__main__':
    contigs = sys.argv[1]
    mapper_dir = sys.argv[2]
    index_input = sys.argv[3]
    mapper = sys.argv[4]

    m = VMap(contigs, mapper, mapper_dir, 12)
    m.build_index(index_input)
    m.run_map()
